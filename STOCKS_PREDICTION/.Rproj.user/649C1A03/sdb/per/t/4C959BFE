{
    "contents" : "1+1\n1+2+3\n7-5\n8+9-6\n4*3*2\n4/2\n4/3\n\nPEMDAS\n4*6+5\n4*(6+5)\n\nx <- 2\ny=5\ny\nz <- 3\nz\na <- b <- 7\na\nb\nassign(\"j\",4)\nj\nrm(j)\nj\ntheVarialble <- 17\ntheVarialble\nTHEVARIABLE\ntheVarialble\n\nx <- 2\nclass(x)\nis.numeric(x)\ni <- 5L\ni\nclass(i)\nis.integer(i)\nis.numeric(i)\nclass(4L)\n4L*2.8\n5L/2L\nclass(5L/2L)\n\nx<- \"data\"\nclass(x)\n\n\ny <- factor(\"data\")\ny\nclass(y)\n\nnchar(x)\nnchar(\"hello\")\nnchar(3)\nnchar(452)\nnchar(y)\n\n\ndate1 <- as.Date(\"2012-06-28\")\ndate1\nclass(date1)\nas.numeric(date1)\n\ndate2 <- as.POSIXct(\"2012-06-28 17:42\")\ndate2\nclass(date2)\ndate2\nas.numeric(date2)\n\nk<- TRUE\nclass(k)\nis.logical(k)\nclass(T)\n\n2 == 3\n2 != 3\n\n2 < 3\n2 <= 3\n\n\"data\" == \"stats\"\n\n\"data\" < \"stats\"\n\nx <- c(1,2,3,4,5,6,7,8,9,10)\nclass(x)\nx\n\n\nx * 3\nx + 2 \nx - 3\nx / 4\nx^2\nsqrt(x)\n\n# define vectors like in matlab\n1:10\n10:1\n-2:3\n5:-7\n\nx <- 1:10\ny <- -5:4\n\nx+y\nx-y\nx/y\n\nx^y\n2^(-4)\nlength(x)\nlength(x+y)\n# the smallest vector will expand to the greatest ones\nx+c(1,2)\nx+c(1,2,3)\n\nx<=5\nx > y\ny > x\nx < y\ny <- -4:5\nx\ny\nx<y\nany(x<y)\nall(x<y)\n\n\nttes_character = \"test\"\nclass(ttes_character)\nnchar(ttes_character)\nq <- c(\"Hockey\",\"Football\",\"Baseball\",\"Curling\",\"Rugby\",\"Lacrosse\",\n       \"Basketball\",\"Tennis\",\"Cricket\",\"Soccer\")\nq\nclass(q)\nnchar(q)\nf <- 7\nx\nx[1]\nx[1:2]\nx[c(1,4)]\n\nbibi=c(One=\"a\", Two=\"y\", Last=\"r\")\nclass(bibi)\n\nw <- 1:3\nw\nclass(w)\n\nnames(w) <- c(\"a\",\"b\",\"c\")\nw\nw[\"a\"]\nw[\"b\"]\nw[\"c\"]\n\n\nq2 <- c(q, \"Hockey\",\"Lacrosse\",\"Hockey\", \"Water Polo\",\"Hockey\",\"Lacrosse\", \"Hockey\",\"Lacrosse\",\"Hockey\", \"Water Polo\",\"Hockey\",\"Lacrosse\", \"Hockey\",\"Lacrosse\",\"Hockey\", \"Water Polo\",\"Hockey\",\"Lacrosse\")\nq\nq[1]\nq[2]\nq[3]\n\nq2\n\nq2Factor <- factor(q2)\n# categorical type, enumerated type\nq2Factor\nas.numeric(q2Factor)\n\nz <- c(1, 2, NA, 8, 3, NA, 3)\nz\nis.na(z)\n\nzChar <- c(\"Hockey\", NA, \"Lacrosse\")\nis.na(zChar)\n\nd<- NULL\nd\nis.null(d)\n\n\nz <- c(1,NULL,3)\nz\n\n\nx <- 1:10\nmean(x)\nsum(x)\nnchar(x)\n\nmean(x=x,trim=.1)\nmean(x,na.rm=TRUE)\n\nx[c(2,6)]<-NA\nx\nmean(x)\nmean(x,na.rm=TRUE)\n\nx <- 1:10\ny <- -4:5\nq <- c(\"Hockey\",\"Football\",\"Baseball\",\"Curling\",\"Rugby\",\"Lacrosse\",\n       \"Basketball\",\"Tennis\",\"Cricket\",\"Soccer\")\ntheDF <- data.frame(x,y,q)\ntheDF\ntheDF <- data.frame(First= x,Second=y,Sport=q)\ntheDF\nclass(theDF$Sport)\n\ntheDF <- data.frame(First= x,Second=y,Sport=q, stringsAsFactors=FALSE)\ntheDF\nclass(theDF$Sport)\n\nnrow(theDF)\nncol(theDF)\ndim(theDF)\nNROW(theDF)\nnrow(x)\nlength(x)\nNROW(x)\n\nnames(theDF)\nnames(theDF)[3]\nrownames(theDF)\nrownames(theDF)<-c(\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Ten\")\nrownames(theDF)\nrownames(theDF) <- NULL\nrownames(theDF)\nhead(theDF,n=7)\ntail(theDF)\ntail(theDF,n=7)\nclass(theDF)\n\n\ntheDF$Sport\ntheDF\ntheDF[3,2]\ntheDF[3,2:3]\ntheDF[c(3,5),2]\ntheDF[c(3,5),2:3]\ntheDF [,3]\nclass(theDF [,3])\n\ntheDF [,2:3]\nclass(theDF [,2:3])\ntheDF [,3, drop=FALSE]\n\n\nclass(theDF [,3, drop=FALSE])\ntheDF[2,]\nclass(theDF[2,])\n\ntheDF[2:4,]\n\n\ntheDF[,c(\"First\",\"Sport\")]\ntheDF[,c(\"Sport\",\"First\")]\ntheDF[,\"Sport\"]\nclass(theDF[,\"Sport\"])\ntheDF[,\"Sport\",drop=FALSE]\nclass(theDF[,\"Sport\",drop=FALSE])\n\ntheDF[\"Sport\"]\ntheDF[[\"Sport\"]]\ntheDF[c(\"First\",\"Sport\")]\n\nlist1 <- list(1,2,3)\nlist1\n\nlist2 <- list(c(1,2,3))\nlist2\n\n\nlist3 <- list(c(1,2,3),3:7)\nlist3\n\ntheDF <- data.frame(First = 1:5, Second=5:1, \n                    Sport=c(\"Hockey\",\"Lacrosse\",\"Football\",\"Curling\",\"Tennis\"),\n                    stringsAsFactors = FALSE)\n\ntheDF\nlist4<- list(theDF,1:10)\nlist4\n\nlist5<-list(theDF, 1:10,list3)\nlist5\n\nnames(list5)\n\nnames(list5) <- c(\"data.frame\",\"vector\",\"list\")\nlist5\n\n\nlist6 <-list(TheDataFrame=theDF, TheVector=1:10, TheList=list3)\nlist6\nnames(list6)\n\nemptyList <- vector(mode=\"list\",length=4)\nemptyList\nemptyList[[1]]<-5\nemptyList\nlist5[[1]]\nnames(list5)\nlist5[[\"data.frame\"]]\nlist5[[1]]$Sport\nlist5[[1]][,\"Second\"]\nlist5[[1]][,\"Second\",drop=FALSE]\n\nlength(list5)\nNROW(list5)\n\nlist5[[4]]<- 2\nlist5\nlist5[[\"NewElement\"]]<-3:6\nnames(list5)\nlist5\n\nA <- matrix(1:10, nrow=5)\nA\n\nB <- matrix(21:30, nrow=5)\nB\nC <- matrix(21:40, nrow=2)\nC\nnrow(A)\nncol(A)\ndim(A)\nA\nB\nA+B\nA*B\nA == B\n\nncol(A)\nnrow(B)\nt(B)\nA  %*% t(B)\nA  %*% C\ncolnames(A)\nrownames(A)\ncolnames(A)<- c(\"Left\",\"Right\")\nrownames(A)<- c(\"1st\",\"2nd\",\"3rd\",\"4th\",\"5th\")\ncolnames(B)<- c(\"Left\",\"Right\")\nrownames(B)<- c(\"One\",\"Two\",\"Three\",\"Four\",\"Five\")\n\nLETTERS\nletters\n\n\ncolnames(C)<-LETTERS[1:10]\nrownames(C)<-c(\"Top\",\"Bottom\")\nC\nA %*% C\n\n\ntheArray <- array(1:12,dim=c(2,3,2))\ntheArray\ntheArray[1,,]\ntheArray[1,,,]\ntheArray[1, , 1]\ntheArray[,,1]\n\n\nurl_path <- \"http://www.jaredlander.com/data/Tomato%20First.csv\"\n\ntomato <- read.table(file=url_path,header=TRUE, sep=\",\")\nclass(tomato)\nhead(tomato)\nclass(tomato$Tomato)\n\n\ntomato <- read.table(file=url_path,header=TRUE, sep=\",\",stringsAsFactors = FALSE)\nclass(tomato)\nhead(tomato)\nclass(tomato$Tomato)\nsep=\"\\t\"\nsep=\";\"\n\ninstall.packages(\"RODBC\")\nrequire(RODBC)\ndb <- odbcConnect(\"QV Training\")\nordersTable <- sqlQuery(db, \"select * from Orders\",stringsAsFactors=FALSE)\nhead(ordersTable)\n\n\nrequire(quantmod)\natt <- getSymbols(\"T\",auto.assign=FALSE)\natt\nrequire(xts)\nhead(att)\nplot(att)\nchartSeries(att)\naddBBands()\naddMACD(32,50,12)\n\nattClose <- att$T.Close\nclass(attClose)\n\nrequire(rugarch)\n\nattSpec <- ugarchspec(variance.model = list(model=\"sGARCH\", garchOrder = c(1,1)),\n                      mean.model=list(armaOrder=c(1,1)),\n                      distribution.model=\"std\")\nattGarch <- ugarchfit(spec = attSpec, data= attClose)\n\nplot(attGarch@fit$residuals,type=\"l\")\nplot(attGarch, which=10)\n\nattPred <- ugarchboot(attGarch, n.ahead=50, method=c(\"Partial\",\"Full\")[1])\nattLog <- diff(log(attClose))[-1]\n\nattLogSpec <- ugarchspec(variance.model = list(model=\"sGARCH\", garchOrder = c(1,1)),\n                         mean.model=list(armaOrder=c(1,1)),\n                         distribution.model=\"std\")\n\nattLogGarch <- ugarchfit(spec=attLogSpec, data=attLog)\ninfocriteria(attGarch)\ninfocriteria(attLogGarch)\n\nurl_path <- \"http://www.jaredlander.com/data/Tomato%20First.csv\"\n\ntomato <- read.table(file=url_path,header=TRUE, sep=\",\")\nclass(tomato)\nhead(tomato)\nclass(tomato$Tomato)\n\nsave(tomato, file=\"C://Users//Stefan.Duprey//Documents//R//tutorial//tomato.rdata\")\n\n\nrm(tomato)\ntomato\nload(\"C://Users//Stefan.Duprey//Documents//R//tutorial//tomato.rdata\")\nhead(tomato)\n\nn <- 20\nr <- 1:10\nw <- data.frame(n,r)\nw\nsave(n, r, w, file=\"C://Users//Stefan.Duprey//Documents//R//tutorial//multiple.rdata\")\nrm(n,r,w)\nn\nr\nw\nload(file=\"C://Users//Stefan.Duprey//Documents//R//tutorial//multiple.rdata\")\n\n\nrequire(ggplot2)\ndata(diamonds)\nhead(diamonds)\ndata(\"tips\", package=\"reshape2\")\nhead(tips)\n\n\ndata()\n\nrequire(XML)\ntheURL <- \"http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/\"\n\nbowlGame <- readHTMLTable(theURL, which=1, header=FALSE, stringsAsFactors=FALSE)\n\n\nrequire(ggplot2)\ndata(diamonds)\nhead(diamonds)\n\nclass(diamonds)\n\nhist(diamonds$carat)\nhist(diamonds$carat, main=\"Title\")\n\n\n\nplot(diamonds$carat, diamonds$price)\n\nplot(price ~ carat, data=diamonds)\nplot(price ~ carat, data=diamonds, main=\"Price vs Carat\")\n\nboxplot(diamonds$carat)\n\nrequire(ggplot2)\n\n#ggplot(data)\n#geom_point\n#geom_histogram\n#aes(x,y)\n\nggplot(data=diamonds) + geom_histogram(aes(x=carat))\nggplot(data=diamonds) + geom_histogram(aes(x=carat),binwidth=.5)\nggplot(data=diamonds) + geom_histogram(aes(x=carat),binwidth=.1)\n\nggplot(data=diamonds) + geom_density(aes(x=carat), fill=\"grey50\")\n\nggplot(diamonds, aes(x=carat, y=price)) + geom_point()\n\ng <- ggplot(diamonds, aes(x=carat, y=price))\ng\ng  + geom_point()\ng + geom_point(aes(color = color))\n\n\ng + geom_point(aes(color = color, shape=clarity))\n\ng + geom_point(aes(color = color, shape=cut))\n\n\nggplot(diamonds, aes(y=carat, x=1)) + geom_boxplot()\nggplot(diamonds, aes(y=carat, x=cut))+ geom_boxplot()\n\nggplot(diamonds, aes(y=carat, x=cut))+ geom_violin()\n\ng <- ggplot(diamonds, aes(y=carat, x=cut))\ng+geom_point()+geom_violin()\ng+geom_violin()+geom_point()\n\ng + geom_jitter() + geom_violin()\n\n\n\nhead(economics)\nggplot(economics, aes(x=date, y=pop))+geom_line()\n\nrequire(lubridate)\n\neconomics$year <- year(economics$date)\neconomics$month <- month(economics$date)\n\nhead(economics)\n\necon2000 <- economics[which(economics$year >= 2000),]\nnrow(economics)\nnrow(econ2000)\n\nhead(econ2000)\n\necon2000$month <- month(econ2000$date, label=TRUE)\nhead(econ2000)\n\nrequire(scales)\n\ng <- ggplot(econ2000, aes(x=month, y=pop))\ng <- g + geom_line(aes(color=factor(year),group=year))\ng\ng <- g + scale_color_discrete(name=\"Year\")\ng <- g + scale_y_continuous(labels=comma)\ng <- g + labs(title = \"Population Growth\", x=\"Month\", y=\"Population\")\ng\ng <- g + theme(axis.text.x = element_text(angle=90, hjust=1))\ng\n\nhead(diamonds)\n\ng <- ggplot(diamonds, aes(x=carat, y=price))\ng <- g+geom_point(aes(color=color)) + facet_wrap(~color)\ng\ng <- g+geom_point(aes(color=color)) + facet_grid(cut~clarity)\ng\n\ng <- ggplot(diamonds, aes(x=carat)) + geom_histogram() + facet_wrap(~color)\ng\nhead(diamonds)\nggplot(diamonds, aes(x=carat, y=price, color=color, shape = cut, size = depth))+geom_point()\n\n\nrequire(ggthemes)\n\ng <- ggplot(diamonds, aes(x=carat, y=price, color=color))+geom_point()\ng\ng  + theme_wsj()\ng + theme_economist()\ng + theme_economist() + scale_colour_economist()\ng + theme_tufte()\ng + theme_excel() + scale_colour_excel()\n\n\nsay.hello <- function()\n{\n  print(\"Hello, World!\")\n}\n\n\nsay.hello\nsay.hello()\n\nsprintf(\"hello %s\", \"Stefan\")\nsprintf(\"hello %s, today is  %s\", \"Stefan\", \"Sunday\")\nsprintf(\"hello %s, today is  %s\", \"Stefan\", \"Saturday\")\n\nhello.person <- function(name)\n{\n  \n  print(sprintf(\"Hello %s\", name))\n  \n}\n\n\n\nhello.person(\"Stefan\")\n\n\nhello.person <- function(first, last)\n{\n  \n  print(sprintf(\"Hello %s %s\", first, last))\n  \n}\n\n\nhello.person(\"Stefan\",\"Duprey\")\n\nhello.person(last=\"Duprey\", first=\"Stefan\")\n\nhello.person(last=\"Duprey\", \"Stefan\")\n\n\nhello.person <- function(first, last=\"Duprey\")\n{\n  print(sprintf(\"Hello %s %s\", first, last))\n}\n\nhello.person(\"Stefan\", \"my last name\")\n\nhello.person(\"Stefan\")\n\nhello.person(first=\"Stefan\")\n\nhello.person(\"Stefan\", extra=\"Goodbye\")\nhello.person(\"Stefan\", \"Duprey\",extra=\"Goodbye\")\n\nhello.person <- function(first, last=\"Duprey\", ...)\n{\n  print(sprintf(\"Hello %s %s\", first, last))\n}\n\nhello.person(\"Stefan\", \"Duprey\",extra=\"Goodbye\")\n\n\nhello.person(\"Stefan\",extra=\"Goodbye\")\n\n\n\ndouble.num <- function(x){\n   2*x\n}\n\n\ndouble.num(3)\n\ndouble.num <- function(x){\n  return (2*x)\n}\n\ndouble.num(3)\n\n\n\ndouble.num <- function(x){\n  return (2*x)\n  print(\"Hello\")\n  return(17)\n}\n\n\ndouble.num(5)\n\n\nhello.person <- function(first, last = \"Duprey\", ...)\n{\n  print(sprintf(\"Hello %s %s\", first, last))\n}\n\nhello.person(\"Stefan\",\"Duprey\")\n\ndo.call(\"hello.person\", args=list(first=\"Stefan\",last=\"Duprey\"))\ndo.call(hello.person, args=list(first=\"Stefan\",last=\"Duprey\"))\n\n\nrun.this <- function(x, func=mean){\n  do.call(func, args=list(x))\n}\n\nrun.this(1:10)\n\nrun.this(1:10,mean)\n\nrun.this(1:10,sum)\n\nrun.this(1:10,sd)\n\n1 == 1\n\n1 <= 1\n\n1 > 1\n\ntoCheck <- 1\nif (toCheck == 1){\n  print(\"Hello\")\n}\n\ntoCheck <- 0\nif (toCheck == 1){\n  print(\"Hello\")\n}\n\n# the else keyword always after the {}\ncheck.bool <- function(x){\n  if (x==1) {\n    print(\"Hello\")\n  } else {\n    print(\"Goodbye\")\n  }\n}\n\ncheck.bool(1)\ncheck.bool(0)\ncheck.bool(\"k\")\ncheck.bool(TRUE)\n\n\ncheck.bool <- function(x){\n  if (x==1) {\n    # comment ignored by computers\n    print(\"Hello\")\n  } else {\n    print(\"Goodbye\")\n  }\n}\n\n\n\ncheck.bool <- function(x)\n{\n  if (x==1) \n  {\n    # comment ignored by computers\n    print(\"Hello\")\n  } else if (x==0)\n  {\n    print(\"Goodbye\")\n  } else \n  {\n    print(\"Confused\")\n  }\n}\n\n\ncheck.bool(1)\n\ncheck.bool(0)\n\ncheck.bool(2)\n\ncheck.bool(\"k\")\n\nuse.switch <- function(x)\n{\n  switch(x,\n         \"a\"=\"first\",\n         \"b\"=\"second\",\n         \"z\"=\"last\",\n         \"c\"=\"third\",\n         \"other\"\n         )\n}\n\n\nuse.switch(\"a\")\nuse.switch(\"b\")\nuse.switch(\"c\")\nuse.switch(\"d\")\nuse.switch(1)\nuse.switch(2)\nuse.switch(3)\nuse.switch(5)\nuse.switch(7)\nis.null(use.switch(7))\n\n\nifelse(1 ==1, \"Yes\", \"No\")\n\nifelse(1 == 0, \"Yes\", \"No\")\n\ntoTest <- c(1,1,0,1,0,1)\n\nifelse(toTest == 1, \"Yes\", \"No\")\n\nifelse(toTest == 1, toTest*3, toTest)\n\nifelse(toTest == 1, toTest*3, \"Zero\")\n\ntoTest[2] <- NA\n\ntoTest\n# even if NA is different from 1 it returns NA et not TRUE\n# it is the best way to deal with missing values\nifelse(toTest == 1, toTest*3, \"Zero\")\n\na <- c(1,1,0,1)\nb <- c(2,1,0,1)\nifelse(a==1 & b==1,\"Yes\",\"No\")\n# don't use ifelse with double ampersand\nifelse(a==1 && b==1,\"Yes\",\"No\")\n\n# & and\n# | or\n\nx<- 1 \ny<- 2\nif (x == 0 & y ==3)\n{\n  print(\"hello\")\n}\n# && does not check the second assertion\n\nif (x == 0 && y ==3)\n{\n  print(\"hello\")\n}\n\n# || does not check the second assertion\nif (x == 1 || y ==3)\n{\n  print(\"hello\")\n}\n\nifelse(b == 1,  \"Hi\", ifelse(b==0, \"Hello\",\"Goodbye\"))\n\n\nrnorm(10)\nrnorm(10, mean=100, sd=20)\nrandNorm10 <- rnorm(10)\ndnorm(randNorm10)\ndnorm(c(-1,0,1))\n\nrequire(ggplot2)\nrandNorm <- rnorm(30000)\nrandDensity <- dnorm(randNorm)\nggplot(data.frame(x=randNorm, y=randDensity)) + aes(x=x,y=y)+\n  geom_point()+labs(x=\"Random Variables\", y=\"Density\")\n\npnorm(randNorm10)\npnorm(c(-3,0,3))\npnorm(1) - pnorm(0)\n\nrandNorm10\npnorm(randNorm10)\nqnorm(pnorm(randNorm10))\n\n# not identical due to rounding issues\nidentical(randNorm10, qnorm(pnorm(randNorm10)))\n\nrbinom(n=1, size=10, prob=0.4)\nrbinom(n=5, size=10, prob=0.4)\nrbinom(n=10, size=10, prob=0.4)\nrbinom(n=1, size=1, prob=0.4)\n\nrbinom(n=10, size=1, prob=0.4)\n\nbinomData <- data.frame(Success = rbinom(n=10000, size=10, prob=0.3))\nggplot(binomData, aes(x=Success))+geom_histogram(binwidth=1)\n\n\nbinom5 <- data.frame(Success = rbinom(n=10000, size=5, prob=0.3),Size=5)\n\nbinom10 <- data.frame(Success = rbinom(n=10000, size=10, prob=0.3),Size=10)\n\nbinom100 <- data.frame(Success = rbinom(n=10000, size=100, prob=0.3),Size=100)\n\nbinom1000 <- data.frame(Success = rbinom(n=10000, size=1000, prob=0.3),Size=1000)\n\nbinomAll <- rbind(binom5, binom10, binom100, binom1000)\n\nhead(binomAll,10)\ntail(binomAll,10)\nggplot(binomAll, aes(x=Success))+geom_histogram() + facet_wrap(~Size,scales=\"free\")\n\ndbinom(x=3, size=10, prob=0.3)\npbinom(q=3, size=10, prob=0.3)\nqbinom(p=0.3, size=10, prob=0.3)\nqbinom(p=c(.3,.35,.4,.5,.6), size=10, prob=0.3)\n\n\npois1 <- rpois(n=10000, lambda=1)\npois2 <- rpois(n=10000, lambda=2)\npois5 <- rpois(n=10000, lambda=5)\npois10 <- rpois(n=10000, lambda=10)\npois20 <- rpois(n=10000, lambda=20)\n\npois <- data.frame(lambda.1=pois1,lambda.2=pois2,lambda.5=pois5,lambda.10=pois10,lambda.20=pois20)\n\nhead(pois)\n\nrequire(reshape2)\n\npois <- melt(data=pois, variable.name=\"Lambda\",value.name=\"x\")\nhead(pois)\ntail(pois)\n\nrequire(stringr)\npois$Lambda <- str_extract(string=pois$Lambda, pattern=\"\\\\d+\")\n\nhead(pois)\nclass(pois)\nclass(pois$Lambda)\npois$Lambda <- as.factor(as.numeric(pois$Lambda))\ntail(pois)\n\nggplot(pois, aes(x=x)) + \n  geom_density(aes(group=Lambda, color=Lambda, fill=Lambda),adjust=4,alpha=1/2)\n+ scale_color_discrete() + scale_fill_discrete() + ggtitle(\"Probability mass function\")\n\n?sample\n\nx <- sample(1:100, size=100, replace=FALSE)\nx\nmean(x)\nmean(1:100)\n\n\nx <- sample(1:100, size=100, replace=TRUE)\nx\nmean(x)\nmean(1:100)\n\n\ny <- x\ny[sample(1:100, size=20, replace=FALSE)] <- NA\ny\n\nmean(y)\nmean(y, na.rm=TRUE)\n\ngrades <- c(95, 72, 87, 66)\nweights <- c(1/2, 1/4, 1/8, 1/8)\nmean(grades)\n\nweighted.mean(x=grades, w=weights)\n\n\nvar(x)\nmean(x)\n\nsum((x-mean(x))^2)/(length(x)-1)\nsqrt(var(x))\nsd(x)\nsd(y)\nsd(y, na.rm=TRUE)\n\nsum(x)\nmin(x)\nmax(x)\nsummary(x)\nsummary(y)\n\nquantile(x, probs=c(0.25,0.75))\nquantile(x, probs=c(.1,0.25,0.75,.9))\n\nrequire(ggplot2)\nhead(economics)\n\ncor(economics$pce,economics$psavert)\ncor(economics[,c(2,4:6)])\n\neconCor <- cor(economics[,c(2,4:6)])\neconCor\nrequire(reshape2)\neconMelt <- melt(econCor, varnames=c(\"x\",\"y\"),value.name=\"Correlation\")\neconMelt\neconMelt <- econMelt[order(econMelt$Correlation),]\neconMelt\n\nrequire(scales)\n\nggplot(econMelt, aes(x=x,y=y)) + \n  geom_tile(aes(fill=Correlation)) +\n  scale_fill_gradient2(low=muted(\"red\"), mid=\"white\", high=\"steelblue\",guide=guide_colorbar(ticks=FALSE, barheight=10), limits=c(-1,1))+\n  theme_minimal() + labs(x=NULL,NULL)\n\nm <- c(9 , 9,NA,3,NA,5 ,8,1 ,10,4 )\nn <- c(2 ,NA,1 ,6,6 ,4 ,1,1 ,6 ,7 )\np <- c(8 , 4,3 ,9,10,NA,3,NA,9 ,9 )\nq <- c(10,10,7 ,8,4 ,2 ,8,5 ,5 ,2 )\nr <- c(1 , 9,7 ,6,5 ,6 ,2,7 ,9 ,10)\n\ntheMat <- cbind(m,n,p,q,r)\n\ncor(theMat)\n\ncor(theMat, use=\"everything\")\ncor(theMat, use=\"all.obs\")\n# use only raws with no NA elements\ncor(theMat, use=\"complete.obs\")\n# use only raws with no NA elements or return na\ncor(theMat, use=\"na.or.complete\")\ncor(theMat[c(1,4,7,9,10),])\n# the most permissive but computationnaly intensive\ncor(theMat, use=\"pairwise.complete.obs\")\n\n?cor\n\ndata(\"tips\", package=\"reshape2\")\n\nhead(tips)\nclass(tips)\nclass(tips$tip)\nclass(tips$sex)\nclass(tips$day)\nunique(tips$sex)\nunique(tips$day)\n\nt.test(tips$tip, alternative=\"two.sided\",mu=2.5)\n\nrequire(ggplot2)\nrandT <- rt(30000, df=NROW(tips)-1)\ntipTTest <- t.test(tips$tip, alternative=\"two.sided\",mu=2.5)\ntipTTest\ntipTTest$statistic\n\nggplot(data.frame(x=randT))+\ngeom_density(aes(x=x),fill=\"grey\", color=\"grey\")+\ngeom_vline(xintercept=tipTTest$statistic) +\ngeom_vline(xintercept=mean(randT)+c(-2,2)*sd(randT),linetype=2)\n  \nt.test(tips$tip, alternative=\"greater\",mu=2.5)\n\naggregate(tip~sex, data=tips, mean)\naggregate(tip~sex, data=tips, var)\n\nshapiro.test(tips$tip[tips$sex == \"Female\"])\nshapiro.test(tips$tip[tips$sex == \"Male\"])\n\nggplot(tips, aes(x=tip, fill=sex))+geom_histogram(binwidth=.5, alpha=1/2)\n\nansari.test(tip ~ sex, tips)\nt.test(tip~sex, data = tips, var.equal = TRUE)\n\nrequire(plyr)\nrequire(ggplot2)\ntipSummary <- ddply(tips, \"sex\", summarize, \n                    tip.mean=mean(tip),tip.sd=sd(tip),\n                    Lower = tip.mean -2*tip.sd/sqrt(NROW(tip)),\n                    Upper = tip.mean +2*tip.sd/sqrt(NROW(tip))\n                    )\n\ntipSummary\n\nggplot(tipSummary, aes(x=tip.mean, y=sex))+geom_point() +\n  geom_errorbarh(aes(xmin=Lower, xmax=Upper), height=.2)\n\n\ntipAnova <- aov(tip~day -1, tips)\ntipAnova <- aov(tip~day, tips)\ntipAnova$coefficients\nsummary(tipAnova)\n\n\ntipsByDay <- ddply(tips, \"day\", summarize,\n                   tip.mean=mean(tip), tip.sd=sd(tip),\n                   Length=NROW(tip),\n                   tfrac=qt(p=.9,df=Length-1),\n                   Lower=tip.mean -tfrac*tip.sd/sqrt(Length),\n                   Upper=tip.mean +tfrac*tip.sd/sqrt(Length))\n\nggplot(tipsByDay, aes(x=tip.mean, y=day))+geom_point()+geom_errorbarh(aes(xmin=Lower,xmax=Upper),height=.3)\n\n# data munging\ntheMatrix <- matrix(1:9,nrow=3)\ntheMatrix\n# apply waits for a matrix as entry\n# MARGIN = 2 =====> columns\napply(theMatrix, MARGIN=2,sum)\napply(theMatrix, MARGIN=1,sum)\n\n\ncolSums(theMatrix)\nrowSums(theMatrix)\n\ntheMatrix[2,1] <- NA\ntheMatrix\napply(theMatrix, MARGIN=1,sum)\n\napply(theMatrix, MARGIN=1,sum,na.rm=TRUE)\nrowSums(theMatrix)\nrowSums(theMatrix,na.rm=TRUE)\n\n\ntheList <- list(A=matrix(1:9,nrow=3), B=1:5, C=matrix(1:4,2),D=2)\ntheList\n\n#lapply waits for a list\nlapply(theList, sum)\n\n#sapply waits for a list\nsapply(theList, sum)\n\n# vectors are list\ntheNames <-c(\"Stefan\",\"Duprey\", \"Paul\")\nsapply(theNames, nchar)\n\n\nfirstList <- list(A=matrix(1:16,4),B=matrix(1:16,2),C=1:5)\nsecondList <- list(A=matrix(1:16,4),B=matrix(1:16,8),C=15:1)\n\nfirstList\nsecondList\n\n# mapping two lists\nmapply(identical, firstList, secondList)\n\n\nsimplefunc <- function(x,y)\n{\n  NROW(x)+NROW(y)\n}\n\nmapply(simplefunc, firstList, secondList)\n\n\nrequire(ggplot2)\ndata(diamonds)\nhead(diamonds)\n\nmean(diamonds$price)\naggregate(price~cut, diamonds, mean)\n\naggregate(price~cut, diamonds, mean, na.rm=TRUE)\n\naggregate(price~cut +color, diamonds, mean)\n\naggregate(cbind(price, carat)~cut, diamonds, mean)\n\naggregate(cbind(price, carat) ~ cut + color, diamonds, mean)\n\n\nrequire(plyr)\nhead(baseball,20)\nclass(baseball)\nclass(baseball$year)\nclass(baseball$year <1954)\nbaseball$sf[baseball$year <1954] <- 0\nbaseball$sf[baseball$year <1954]\nany(is.na(baseball$sf))\n\nbaseball$hbp[is.na(baseball$hbp)] <- 0\nany(is.na(baseball$hbp))\n\nbaseball<- baseball[baseball$ab>50,]\n\nbaseball$OBP <- with(baseball,  (h+bb+hbp)/(ab+bb+hbp+sf))\ntail(baseball)\n\nobp <- function(data)\n{\n  c(OBP <- with(data, sum(h+bb+hbp)/sum(ab+bb+hbp+sf)))\n}\n\nobp <- function(data)\n{\n  c(OBP=with(data, sum(h+bb+hbp)/sum(ab+bb+hbp+sf)))\n}\n\n\n# ddply waits for a dataset\ncareerOBP <- ddply(baseball, .variables=\"id\", obp)\nhead(careerOBP)\n\ncareerOBP <- careerOBP[order(careerOBP$OBP, decreasing=TRUE),]\n\nhead(careerOBP)\n\ntheList <- list(A=matrix(1:9,3),B=1:5, C=matrix(1:4,2), D=2)\ntheList\nlapply(theList, sum)\nllply(theList, sum)\n\nidentical(lapply(theList, sum),llply(theList, sum))\n\n\nsapply(theList,sum)\nlaply(theList, sum)\n\nhead(diamonds)\naggregate(price~cut, diamonds, each(mean, median))\n\nnumcolwise(sum, na.rm=TRUE, diamonds)\nsapply(diamonds[,sapply(diamonds, is.numeric)],sum)\n\n\n## end of plyr\n\nsport <- c(\"Hockey\",\"Baseball\",\"Football\")\nleague <- c(\"NHL\", \"MLB\", \"NFL\")\ntrophy <- c(\"Stanley Cup\", \"Commissioner's Trophy\", \"Vince Lombardi Trophy\")\nclass(sport)\n\nsports1 <- cbind(sport, league, trophy)\nclass(sports1)\nsports1\n\nsports2 <- data.frame(sport=c(\"Basketball\",\"Golf\"),\n                      league=c(\"NBA\",\"PGA\"),\n                      trophy=c(\"Larry O'Biren Championship Trophy\", \"Wanamaker Trophy\"))\n\nsports2\n\nsports <- rbind(sports1, sports2)\nclass(sports)\n\ncountry_code_path = \"http://www.jaredlander.com/data/countryCodes.csv\"\n\ncodes <- read.table(country_code_path, header=TRUE, sep=\",\", stringsAsFactors=FALSE)\ncodes\ncountry_path = \"http://www.jaredlander.com/data/GovType.csv\"\n\ncountries <- read.table(country_code_path, header=TRUE, sep=\",\", stringsAsFactors=FALSE)\nhead(codes)\nhead(countries)\nView(countries)\n\ncountryMerged <- merge(x=codes, y=countries, by.x = \"Country.name\", by.y=\"Country.name\")\nView(countryMerged)\nhead(countryMerged)\n\n\nrequire(plyr)\n\ncodes <- rename(codes, c(Country.name=\"Country\"))\ncountries <- rename(countries, c(Country.name=\"Country\"))\n\nhead(codes)\ncountryJoined <- join(x=codes, y=countries, by=\"Country\")\nView(countryJoined)\n\n\nrequire(reshape2)\nhead(airquality)\nclass(airquality)\n\nairMelt <- melt(airquality, id = c(\"Month\",\"Day\"),\n                value.name=\"Value\",variable.name=\"metric\")\n\nhead(airMelt, 100)\ndim(airquality)\ndim(airMelt)\n\nairCast <- dcast(airMelt, Month + Day ~ metric, value.var=\"Value\")\nhead(airCast)\nairCast <- airCast[,c(\"Ozone\", \"Solar.R\", \"Wind\",\"Temp\",\"Month\",\"Day\")]\nairCast\nhead(airCast)\n\n\npaste(\"hello\",\"stefan\",\"and others\")\npaste(\"hello\",\"stefan\",\"and others\",sep=\"/\")\npaste(c(\"hello\",\"Hi\",\"Howdy\"), c(\"Stefan\", \"Paul\", \"Lucien\"))\npaste(\"hello\",c(\"Stefan\", \"Paul\", \"Lucien\"))\npaste(\"hello\",c(\"Stefan\", \"Paul\", \"Lucien\"),c(\"goodbye\",\"seeya\"))\n\nvectorOfText <- c(\"Hello\", \"everyone\", \"out there\",\".\")\npaste(vectorOfText)\npaste(vectorOfText, collapse=\" \")\n\nperson <- \"Stefan\"\npartySize <- 8\nwaitTime <- 25\n\npaste(\"Hello \",person, \", your party of \", partySize, \" will be seated in \", waitTime, \" minutes.\",sep=\"\")\n\nsprintf(\"Hello %s, your party of %s will be seated in %s minutes\",person, partySize, waitTime)\n\n# fitting linear models\nrequire(UsingR)\nhead(father.son)\nrequire(ggplot2)\n\nggplot(father.son, aes(x=fheight, y=sheight))+geom_point() +\n  geom_smooth(method=\"lm\")+\n  labs(x=\"Fathers\",y=\"Sons\")\n\n\nheightsLM <- lm(sheight~fheight, data=father.son)\n\nheightsLM\nsummary(heightsLM)\n\n\ndata(tips, package=\"reshape2\")\nhead(tips)\n\ntipsAnova <- aov(tip~day-1, data=tips)\ntipsAnova\n# -1 : do not use an intercept\ntipsLM <- lm(tip~day -1, data=tips)\nsummary(tipsLM)\n\n# time series\nrequire(WDI)\n\ncountries <- c(\"US\",\"CA\",\"GB\",\"CN\",\"JP\",\"SG\",\"IL\")\nindicators <- c(\"NY.GDP.PCAP.CD\", \"NY.GDP.MKTP.CD\")\n\ngdp <- WDI(country=countries, indicator=indicators, start=1960, end=2011)\n\nclass(gdp)\nnames(gdp)<- c(\"isoc\", \"Country\", \"Year\", \"PerCapGDP\", \"GDP\")\nhead(gdp)\n\nrequire(scales)\nggplot(gdp, aes(Year,PerCapGDP, color=Country, linetype=Country ))+\n  geom_line() + scale_y_continuous(label=dollar)\n\nus <- gdp$PerCapGDP[gdp$Country == \"United States\"]\nclass(us)\nhead(us)\n\nus <- ts(us, start=min(gdp$Year), end=max(gdp$Year))\nclass(us)\nplot(us, ylab=\"Per Capita GDP\", xlab=\"Year\")\n\nacf(us)\npacf(us)\n\n# ARIMA modeling\nrequire(forecast)\nusBest <- auto.arima(x=us)\nacf(usBest$residuals)\npacf(usBest$residuals)\n\ncoef(usBest)\npredict(usBest, n.ahead=5, se.fit=TRUE)\n\ntheForecast <- forecast(object=usBest, h=5)\n\nplot(theForecast)\n\n\n# VAR modeling\nhead(gdp)\nrequire(reshape2)\ngdpCast <- dcast(Year ~ Country, data=gdp[,c(\"Country\",\"Year\",\"PerCapGDP\")],value.var=\"PerCapGDP\")\nhead(gdpCast)\n\ngdpTS <- ts(data=gdpCast[,-1],start=min(gdpCast$Year),end=max(gdpCast$Year))\nclass(gdpTS)\nplot(gdpTS, plot.type=\"single\",col=1:8)\nlegend(\"topleft\", legend=colnames(gdpTS),ncol=2,lty=1,col=1:8,cex=.9)\n\n\nnumDiffs <- ndiffs(gdpTS)\ngdpDiffed <- diff(gdpTS, differences=numDiffs)\nplot(gdpDiffed,plot.type=\"single\",col=1:7 )\n\nrequire(vars)\n\ngdpVar <- VAR(gdpDiffed, lag.max=12)\ngdpVar$p\nnames(gdpVar$varresult)\nclass(gdpVar$varresult$Canada)\nhead(coef(gdpVar$varresult$Canada))\nrequire(coefplot)\ncoefplot(gdpVar$varresult$Canada)\ncoefplot(gdpVar$varresult$Japan)\n\npredict(gdpVar, n.ahead=5)\n\n# GARCH modeling\n\nrequire(quantmod)\natt <- getSymbols(\"T\",auto.assign=FALSE)\natt\nrequire(xts)\nhead(att)\nplot(att)\nchartSeries(att)\naddBBands()\naddMACD(32,50,12)\n\nattClose <- att$T.Close\nclass(attClose)\n\nrequire(rugarch)\n\nattSpec <- ugarchspec(variance.model = list(model=\"sGARCH\", garchOrder = c(1,1)),\n                      mean.model=list(armaOrder=c(1,1)),\n                      distribution.model=\"std\")\nattGarch <- ugarchfit(spec = attSpec, data= attClose)\n\nplot(attGarch@fit$residuals,type=\"l\")\nplot(attGarch, which=10)\n\nattPred <- ugarchboot(attGarch, n.ahead=50, method=c(\"Partial\",\"Full\")[1])\nattLog <- diff(log(attClose))[-1]\n\nattLogSpec <- ugarchspec(variance.model = list(model=\"sGARCH\", garchOrder = c(1,1)),\n                         mean.model=list(armaOrder=c(1,1)),\n                         distribution.model=\"std\")\n\nattLogGarch <- ugarchfit(spec=attLogSpec, data=attLog)\ninfocriteria(attGarch)\ninfocriteria(attLogGarch)\n\n\n\n\nrequire(UsingR)\nrequire(ggplot2)\n\n# multiple regression\n\n\n\n\nhousing_market = \"http://www.jaredlander.com/data/housing.csv\"\nhousing <- read.table(housing_market, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nhead(housing)\n\nnames(housing) <- c(\"Neighborhood\", \"Class\", \"Units\", \"YearBuilt\", \"SqFt\",\n                    \"Income\", \"IncomePerSqFt\", \"Expense\", \"ExpensePerSqFt\",\n                    \"NetIncome\", \"Value\", \"ValuePerSqFt\", \"Boro\")\n\nhead(housing)\nclass(housing)\n\n\nrequire(ggplot2)\n\nggplot(housing, aes(x=ValuePerSqFt)) + geom_histogram(binwidth=10) +labs(x=\"Value per square fit\")\n\n\nggplot(housing, aes(x=SqFt)) + geom_histogram()\nggplot(housing, aes(x=ValuePerSqFt, fill=Boro)) + geom_histogram() +labs(x=\"Value per square fit\") +facet_wrap(~Boro)\n\n\n\nggplot(housing, aes(x=SqFt)) + geom_histogram()\nggplot(housing, aes(x=SqFt, y=ValuePerSqFt)) + geom_point()\n\nggplot(housing[housing$Units<1000,], aes(x=SqFt)) + geom_histogram()\nggplot(housing[housing$Units<1000,], aes(x=SqFt, y=ValuePerSqFt)) + geom_point()\n\n\nsum(housing$Units >= 1000)\nhousing <- housing[housing$Units<1000,]\n\nhead(housing)\n\nhouse1 <- lm(ValuePerSqFt ~ Units + SqFt + Boro, data=housing)\nsummary(house1)\n\nhead(model.matrix(ValuePerSqFt ~Boro, data=housing))\nhouse1$coefficients\ncoef(house1)\nsummary(house1)\n\nrequire(coefplot)\ncoefplot(house1)\n\nhouse2 <- lm(ValuePerSqFt ~ Units*SqFt +Boro, data=housing)\ncoefplot(house2)\n\nhead(model.matrix(ValuePerSqFt ~ Units*SqFt, data=housing))\n\nhead(model.matrix(ValuePerSqFt ~ Units:SqFt, data=housing))\n\nhouse3 <- lm(ValuePerSqFt ~ Units:SqFt +Boro, data=housing)\ncoefplot(house3)\n\n\nhouse4 <- lm(ValuePerSqFt ~ Units*SqFt*Income, data=housing)\ncoefplot(house4)\n\n\nhouse5 <- lm(ValuePerSqFt ~ Class*Boro, data=housing)\nhouse5$coefficients\n\nhouse6 <- lm(ValuePerSqFt ~ I(SqFt/Units), data=housing)\nhouse6$coefficients\n\nhouse7 <- lm(ValuePerSqFt ~ (Units + SqFt)^2, data=housing)\nhouse7$coefficients\n\nhouse8 <- lm(ValuePerSqFt ~ Units*SqFt, data=housing)\nhouse8$coefficients\n\nhouse9 <- lm(ValuePerSqFt ~ I(Units + SqFt)^2, data=housing)\nhouse9$coefficients\n\n\nmultiplot(house1, house2, house3)\n\n\nhousingNew_market = \"http://www.jaredlander.com/data/housingNew.csv\"\nhousingNew <- read.table(housingNew_market, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nhead(housingNew)\nhousePredict <- predict(house1, newdata=housingNew, se.fit=TRUE, interval=\"prediction\", level=.95)\nhead(housePredict$fit)\n\n# fit logistic regression\n# american community survey acs ~ census\nacs_path = \"http://www.jaredlander.com/data/acs_ny.csv\"\nacs <- read.table(acs_path, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nhead(acs)\nacs$Income <- with(acs, FamilyIncome >= 150000)\nacs$Income\n\nrequire(ggplot2)\nrequire(useful)\n\nggplot(acs, aes(x=FamilyIncome))+\n  geom_density(fill=\"grey\",color=\"grey\")+\n  geom_vline(xintercept=150000)+\n  scale_x_continuous(label = multiple.dollar, limits=c(0,1000000))\n\nincome1 <- glm(Income ~ HouseCosts + NumWorkers + OwnRent + NumBedrooms + FamilyType, data=acs, family = binomial(link=\"logit\"))\nsummary(income1)\n# acs[,-1] drops the first element\n# acs[,-2] drops the second element\nnames(acs)[length(acs)] <- \"Income\"\n\n\nsummary(income1)\nrequire(coefplot)\ncoefplot(income1)\nincome1$coefficients\ninvlogit <- function(x)\n{\n  1/(1+exp(-x))\n}\n\ninvlogit(income1$coefficients)\n\n## fitting a Poisson regression\nacs_path = \"http://www.jaredlander.com/data/acs_ny.csv\"\nacs <- read.table(acs_path, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nhead(acs)\n\n\nggplot(acs, aes(x=NumChildren)) + geom_histogram(binwidth=1)\n\n\nchildren1 <- glm(NumChildren ~ FamilyIncome + FamilyType + OwnRent, data=acs, family=poisson(link=\"log\"))\nsummary(children1)\n\ncoefplot(children1)\n\n# check for over description factor\n\nz <- (acs$NumChildren - children1$fitted.values)/\n   sqrt(children1$fitted.values)\nsum(z^2)/ children1$df.residual\n\n\npchisq(sum(z^2), df=children1$df.residual)\n\nchildren2 <- glm(NumChildren ~ FamilyIncome + FamilyType + OwnRent, data=acs, family=quasipoisson(link=\"log\"))\n\nsummary(children2)\n\nmultiplot(children1, children2)\n\n\n## analyse survival data : time to an event time to a heart attack\nrequire(survival)\nhead(bladder)\n?bladder\n\nbladder[100:105,]\n\nsurvObject <- with(bladder[100:105,], Surv(stop, event))\nsurvObject\nsurvObject[,1:2]\n\ncox1 <- coxph(Surv(stop, event) ~ rx+number+size+enum, data=bladder)\ncoefplot(cox1)\nplot(survfit(cox1),xlab=\"Days\", ylab=\"Survival Rate\", conf.int=TRUE )\n\ncox2 <- coxph(Surv(stop, event) ~ strata(rx)+number+size+enum, data=bladder)\nsummary(cox2)\nplot(survfit(cox2),xlab=\"Days\", ylab=\"Survival Rate\", conf.int=TRUE, col=1:2 )\nlegend(\"bottomleft\", legend=c(1,2), lty=1, col=1:2, text.col=1:2, title=\"rx\")\n\ncox.zph(cox1)\ncox.zph(cox2)\n\n\nhead(bladder)\nhead(bladder2)\n\nag1 <- coxph(Surv(start, stop, event) ~ rx + number + size + enum + cluster(id), data=bladder2)\nplot(survfit(ag1), conf.int=TRUE)\n\nag2 <- coxph(Surv(start, stop, event) ~ strata(rx)+number+size+enum+cluster(id), data=bladder2)\nplot(survfit(ag2), conf.int=TRUE, col=1:2)\nlegend(\"topright\", legend=c(1,2), lty=1, col=1:2, text.col=1:2, title=\"rx\")\n\n# assess quality through the residuals\n\nhousing_market = \"http://www.jaredlander.com/data/housing.csv\"\nhousing <- read.table(housing_market, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nnames(housing) <- c(\"Neighborhood\", \"Class\", \"Units\", \"YearBuilt\", \"SqFt\",\n                    \"Income\", \"IncomePerSqFt\", \"Expense\", \"ExpensePerSqFt\",\n                    \"NetIncome\", \"Value\", \"ValuePerSqFt\", \"Boro\")\n\nhead(housing)\n\n\nhouse1 <- lm(ValuePerSqFt ~ Units + SqFt + Boro, data=housing)\nsummary(house1)\ncoefplot(house1)\n\nhead(fortify(house1))\n\nh1 <- ggplot(aes(x=.fitted, y=.resid), data=house1) +\n  geom_point() + geom_hline(yintercept=0) + \n  geom_smooth(se=FALSE)\n\nh1 + geom_point(aes(color=Boro))\n\nplot(house1, which=2)\nggplot(house1, aes(sample=.stdresid))+stat_qq() + geom_abline()\n\nggplot(house1, aes(x=.resid))+geom_histogram()\n\n\n## comparing models\nhouse1 <- lm(ValuePerSqFt ~ Units + SqFt + Boro, data=housing)\nhouse2 <- lm(ValuePerSqFt ~ Units * SqFt + Boro, data=housing)\nhouse3 <- lm(ValuePerSqFt ~ Units + SqFt * Boro + Class, data=housing)\nhouse4 <- lm(ValuePerSqFt ~ Units + SqFt * Boro + SqFt*Class, data=housing)\nhouse5 <- lm(ValuePerSqFt ~ Boro + Class, data=housing)\n\nmultiplot(house1, house2, house3, house4, house5, pointSize=2 )\n\nanova(house1, house2, house3, house4, house5)\n\nAIC(house1, house2, house3, house4, house5)\n\nBIC(house1, house2, house3, house4, house5)\n\nhousing$HighValue <- housing$ValuePerSqFt>=150\n\nhigh1 <- glm(HighValue ~ Units + SqFt + Boro, data=housing, family=binomial(link=\"logit\"))\nhigh2 <- glm(HighValue ~ Units * SqFt + Boro, data=housing, family=binomial(link=\"logit\"))\nhigh3 <- glm(HighValue ~ Units + SqFt * Boro + Class, data=housing, family=binomial(link=\"logit\"))\nhigh4 <- glm(HighValue ~ Units + SqFt * Boro + SqFt*Class, data=housing, family=binomial(link=\"logit\"))\nhigh5 <- glm(HighValue ~ Boro + Class, data=housing, family=binomial(link=\"logit\"))\n\n\nanova(high1, high2, high3, high4, high5)\nAIC(high1, high2, high3, high4, high5)\nBIC(high1, high2, high3, high4, high5)\n\n# cross validation\nrequire(boot)\nhouseG1 <- glm(ValuePerSqFt ~ Units + SqFt + Boro, data=housing, family=gaussian(link=\"identity\"))\n# K is the number of folds of your cross validation\nhouseCV1 <- cv.glm(housing, houseG1, K=5)\nhouseCV1$delta\n\nhouseG2 <- glm(ValuePerSqFt ~  Units*SqFt + Boro , data=housing, family=gaussian(link=\"identity\"))\nhouseG3 <- glm(ValuePerSqFt ~ Units * SqFt + Boro, data=housing)\nhouseG4 <- glm(ValuePerSqFt ~ Units + SqFt * Boro + Class, data=housing)\nhouseG5 <- glm(ValuePerSqFt ~ Units + SqFt * Boro + SqFt*Class, data=housing)\n\nhouseCV2 <- cv.glm(housing, houseG2, K=5)\nhouseCV3 <- cv.glm(housing, houseG3, K=5)\nhouseCV4 <- cv.glm(housing, houseG4, K=5)\nhouseCV5 <- cv.glm(housing, houseG5, K=5)\n\n\ncvResults <- as.data.frame(rbind(houseCV1$delta,houseCV2$delta,houseCV3$delta,houseCV4$delta,houseCV5$delta))\n\nnames(cvResults) <- c(\"Error\", \"Adjusted.Error\")\ncvResults$Model <- sprintf(\"houseG%s\", 1:5)\ncvResults\n\ncvAnova <- anova(houseG1,houseG2,houseG3,houseG4,houseG5 )\n\ncvAic <- AIC(houseG1,houseG2,houseG3,houseG4,houseG5 )\n\ncvResults$ANOVA <- cvAnova$'Resid. Dev'\ncvResults$AIC <- cvAic$AIC\ncvResults\n\n\n\n## boobstrapping\nrequire(plyr)\nclass(baseball)\nclass(baseball$year)\nhead(baseball)\nbaseball <- baseball[baseball$year >= 1990, ]\nhead(baseball)\n\n\nbat.avg <- function(data, indices=1:NROW(data), hits=\"h\", at.bats=\"ab\")\n{\n  sum(data[indices, hits], na.rm = TRUE) /\n    sum(data[indices, at.bats], na.rm = TRUE)\n}\n\nbat.avg(baseball)\n\nrequire(boot)\navgBoot <- boot(data=baseball, statistic = bat.avg, R=1200, stype=\"i\")\navgBoot\navgBoot$t\nclass(avgBoot)\n\nboot.ci(avgBoot, conf=.95, type=\"norm\")\nrequire(ggplot2)\nggplot()+geom_histogram(aes(x=avgBoot$t), fill=\"grey\", color=\"grey\") + \n  geom_vline(xintercept=avgBoot$t0 + c(-1,1)*2*sqrt(var(avgBoot$t)), linetype=2)\n\n## choosing variables using stepwise regression\n\nhousing_market = \"http://www.jaredlander.com/data/housing.csv\"\nhousing <- read.table(housing_market, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nnames(housing) <- c(\"Neighborhood\", \"Class\", \"Units\", \"YearBuilt\", \"SqFt\",\n                    \"Income\", \"IncomePerSqFt\", \"Expense\", \"ExpensePerSqFt\",\n                    \"NetIncome\", \"Value\", \"ValuePerSqFt\", \"Boro\")\n\nhead(housing)\n\nnullModel <- lm(ValuePerSqFt ~ 1, data=housing)\nfullModel <- lm(ValuePerSqFt ~ Units + SqFt*Boro + Boro*Class, data=housing)\n\nhouseStep <- step(nullModel, scope=list(lower=nullModel, upper=fullModel), direction=\"both\")\n\nhouseStep\n\n# elastic net\nacs_path = \"http://www.jaredlander.com/data/acs_ny.csv\"\nacs <- read.table(acs_path, sep=\",\",header=TRUE, stringsAsFactors=FALSE)\nacs$Income <- with(acs, FamilyIncome >= 150000)\nacs$Income\n\nhead(acs)\nrequire(glmnet)\nrequire(useful)\n\n# build.x will build the dummy variables from categoricat features for you\nacsX <- build.x(Income ~ NumBedrooms + NumChildren + NumPeople + NumRooms +\n                  NumUnits + NumVehicles + NumWorkers + OwnRent + YearBuilt +\n                  ElectricBill + FoodStamp + HeatingFuel + Insurance + Language -1,\n                data=acs, contrast=FALSE)\n\nclass(acsX)\ndim(acsX)\ntopleft(acsX, c=6)\ntopright(acsX, c=6)\n\n# build.y will build the output\nacsY <- build.y(Income ~ NumBedrooms + NumChildren + NumPeople + NumRooms +\n                  NumUnits + NumVehicles + NumWorkers + OwnRent + YearBuilt +\n                  ElectricBill + FoodStamp + HeatingFuel + Insurance + Language -1,\n                data=acs)\nhead(acsY)\ntail(acsY)\n\nset.seed(1863561)\nascCV1 <- cv.glmnet(x=acsX, y=acsY, family=\"binomial\", nfold = 5 )\nascCV1$lambda.min\nascCV1$lambda.lse\n\nplot(ascCV1)\n\ncoef(ascCV1, s=\"lambda.1se\")\n\nplot(ascCV1$glmnet.fit, xvar=\"lambda\")\n\nabline(v=log(c(ascCV1$lambda.min,ascCV1$lambda.1se)), lty=2)\n\nascCV2 <- cv.glmnet(x=acsX, y=acsY, family=\"binomial\", nfold = 5, alpha=0 )\n\nplot(ascCV2$glmnet.fit, xvar=\"lambda\")\n\nabline(v=log(c(ascCV2$lambda.min,ascCV2$lambda.1se)), lty=2)\n\n# weakly informative prior\n# used for bayesian shrinkage\n\nideo_http_path = \"http://www.jaredlander.com/data/ideo.rdata\"\nideo_downloaded_path = \"C:\\\\Users\\\\Stefan.Duprey\\\\Downloads\\\\ideo.rdata\"\nload(ideo_downloaded_path)\nhead(ideo)\ntheYears<- unique(ideo$Year)\ntheYears\nresults <- vector(mode=\"list\", length = length(theYears))\nresults\nnames(results) <- theYears\nresults\n\nfor (i in theYears)\n{\n  results[[as.character(i)]] <- glm(Vote~Race+Income+Gender+Education, data=ideo, subset= Year==i, family=binomial(link=\"logit\"))\n}\n\nresults\nrequire(coefplot)\nvoteInfo <- multiplot(results, coefficients=\"Raceblack\", plot=FALSE )\nhead(voteInfo)\n\nmultiplot(results, coefficients=\"Raceblack\", secret.weapon = TRUE )\n\nmultiplot(results, coefficients=\"Raceblack\", secret.weapon = TRUE )+\ncoord_flip(xlim=c(-20,10))\n\nresultsB <- vector(mode=\"list\", length = length(theYears))\nnames(resultsB) <- theYears\nresultsB\n#for (i in theYears)\n#{\n#  resultsB[[as.character(i)]] <- arm::bayesglm(Vote~Race+Income+Gender+Education, data=ideo, subset= Year==i, family=binomial(link=\"logit\"), prior.scale=2.5, prior.df=1)\n#}\n\nfor (i in theYears)\n{\n  resultsB[[as.character(i)]] <- arm::bayesglm(Vote~Race+Income+Gender+Education, data=ideo[ideo$Year==i,], family=binomial(link=\"logit\"), prior.scale=2.5, prior.df=1)\n}\n\nmultiplot(resultsB, coefficients=\"Raceblack\", secret.weapon = TRUE )+\n  coord_flip(xlim=c(-20,10))\n  \n\n# fitting non linear least squares\nwifi_http_path = \"http://www.jaredlander.com/data/wifi.rdata\"\nwifi_downloaded_path = \"C:\\\\Users\\\\Stefan.Duprey\\\\Downloads\\\\wifi.rdata\"\nload(wifi_downloaded_path)\nhead(wifi)\nrequire(ggplot2)\n\nggplot(wifi, aes(x=x, y=y, color=Distance))+geom_point() +\n  scale_color_gradient2(low=\"blue\", mid=\"white\", high =\"red\", midpoint=mean(wifi$Distance))\n\nwifiMod1 <- nls(Distance ~ sqrt((betaX-x)^2 + (betaY-y)^2), data=wifi, start=list(betaX=50, betaY=50) )\n\nsummary(wifiMod1)\n\nggplot(wifi, aes(x=x, y=y, color=Distance))+geom_point() +\n  scale_color_gradient2(low=\"blue\", mid=\"white\", high =\"red\", midpoint=mean(wifi$Distance)) +\n  geom_point(data=as.data.frame(t(coef(wifiMod1))), aes(x=betaX, y=betaY), size=5, color=\"green\")\n\n# splines\ndata(diamonds)\ndiaSpline1 <- smooth.spline(x=diamonds$carat, y=diamonds$price)\ndiaSpline2 <- smooth.spline(x=diamonds$carat, y=diamonds$price, df=2)\ndiaSpline3 <- smooth.spline(x=diamonds$carat, y=diamonds$price, df=10)\ndiaSpline4 <- smooth.spline(x=diamonds$carat, y=diamonds$price, df=20)\ndiaSpline5 <- smooth.spline(x=diamonds$carat, y=diamonds$price, df=50)\ndiaSpline6 <- smooth.spline(x=diamonds$carat, y=diamonds$price, df=100)\n\nget.spline.info <- function(object){\n  data.frame(x=object$x,y=object$y, df=object$df )\n}\n\nrequire(plyr)\nrequire(ggplot2)\n\nsplineDF <- ldply(list(diaSpline1,diaSpline2,diaSpline3,diaSpline4,diaSpline5,diaSpline5), get.spline.info)\n\nhead(splineDF)\n\ng <- ggplot(diamonds, aes(x=carat, y=price))+geom_point()\ng+geom_line(data=splineDF, aes(x=x, y=y, color=factor(round(df,0)), group=df))\n+scale_color_discrete(\"Degrees of \\n Freedom\")\n\nrequire(splines)\nhead(ns(diamonds$carat,df=1))\nhead(ns(diamonds$carat,df=2))\nhead(ns(diamonds$carat,df=3))\n\ng+stat_smooth(method=\"lm\",formula=y~ns(x,6), color=\"blue\")\n\n# GAMs : Generalized Additive Models\n\n\n# fitting decision trees and random forest\nrequire(rpart)\ncredit_http_path = \"http://www.jaredlander.com/data/credit.rdata\"\ncredit_downloaded_path = \"C:\\\\Users\\\\Stefan.Duprey\\\\Downloads\\\\credit.rdata\"\nload(credit_downloaded_path)\nhead(credit)\n\n\ncreditTree <- rpart(Credit ~ CreditAmount + Age + CreditHistory + Employment, data=credit)\ncreditTree\nrequire(rpart.plot)\nrpart.plot(creditTree)\nrpart.plot(creditTree, extra=4)\n\nrequire(useful)\nrequire(randomForest)\n\nCreditFormula <- Credit ~ CreditHistory + Purpose + Employment + Duration + Age + CreditAmount\n\nCreditFormula\ncreditX <- build.x(CreditFormula, data=credit)\ncreditX\n\ncreditY <- build.y(CreditFormula, data=credit)\ncreditForest <- randomForest(x=creditX, y=creditY)\ncreditForest\n\n\n# k-means clustering\nwine_data_path = \"http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data\"\nwine <- read.table(wine_data_path, header=TRUE, sep=\",\")\nhead(wine)\nnames(wine) <-c(\"Cultivar\", \"Alcohol\", \"Malic.acid\", \"Ash\", \"Alcanity.of.ash\",\"Magnesium\", \"Total.phenols\", \"Flavanoids\", \"Nonflavanoid.phenols\", \"Proanthocyanins\", \"Color.intensity\", \"Hue\")\n\nwineTrain <- wine[, which(names(wine) !=\"Cultivar\")]\nset.seed(278613)\n\n\nwineK3 <- kmeans(x=wineTrain, centers=3)\n\nwineK3\n\nrequire(useful)\nplot(wineK3, data=wineTrain)\n\nset.seed(278613)\nwineK3N25 <- kmeans(x=wineTrain, centers=3, nstart = 25)\n\nwineK3N25\nwineK3$size\nwineK3N25$size\n\nrequire(useful)\nplot(wineK3, data=wineTrain)\n\nwineBest <- FitKMeans(wineTrain, max.clusters=20, nstart=25, seed=278613)\n\n# Hartigan fitting k mean\nwineBest\nPlotHartigan(wineBest)\n\n\ntable(wine$Cultivar, wineK3N25$cluster)\nplot(table(wine$Cultivar, wineK3N25$cluster), main=\"Confusion matrix for wine clustering\", xlab=\"Cultivar\", ylab=\"Clusters\")\n\nrequire(cluster)\ntheGap <- clusGap(wineTrain, FUNcluster = pam, K.max=20)\ngapDF <- as.data.frame(theGap$Tab)\nhead(gapDF)\n\nggplot(gapDF, aes(x=1:nrow(gapDF)))+\n  geom_line(aes(y=logW), color=\"blue\")+\n  geom_point(aes(y=logW), color=\"blue\")+\n  geom_line(aes(y=E.logW), color=\"green\")+\n  geom_point(aes(y=E.logW), color=\"green\")+\n  labs(x=\"Number of clusters\")\n  \n\nggplot(gapDF, aes(x=1:nrow(gapDF)))+\n  geom_line(aes(y=gap), color=\"red\")+\n  geom_point(aes(y=gap), color=\"red\")+\n  geom_errorbar(aes(ymin=gap-SE.sim, ymax=gap+SE.sim), color=\"red\")+\n  labs(x=\"Number of clusters\", y=\"Gap\")\n\n\n# robustly cluster, even with categorical data with PAM\n# PAM partitioning around midoïd\n# robust to outliers and works with categorical data\nrequire(cluster)\nwinePam <- pam(x=wineTrain, k=4, keep.diss=TRUE, keep.data=TRUE)\nwinePam\nplot(winePam, which.plots=2, main=\"\" )\n\n# hierarchical clustering\nwineH <- hclust(d=dist(wineTrain))\nplot(wineH)\n\nwineH1 <- hclust(d=dist(wineTrain), method=\"single\")\nwineH2 <- hclust(d=dist(wineTrain), method=\"complete\")\nwineH3 <- hclust(d=dist(wineTrain), method=\"average\")\nwineH4 <- hclust(d=dist(wineTrain), method=\"centroid\")\n\nplot(wineH1, labels=FALSE, main=\"Single\")\nplot(wineH2, labels=FALSE, main=\"complete\")\nplot(wineH3, labels=FALSE, main=\"average\")\nplot(wineH4, labels=FALSE, main=\"centroid\")\n\nrect.hclust(wineH, k=3, border=\"red\")\nrect.hclust(wineH, k=13, border=\"blue\")\n\nrect.hclust(wineH, h=20, border=\"red\")\nrect.hclust(wineH, h=30, border=\"blue\")\n\n\n",
    "created" : 1436527826354.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2191500948",
    "id" : "4C959BFE",
    "lastKnownWriteTime" : 1436524991,
    "path" : "~/R/tutorial/first.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}